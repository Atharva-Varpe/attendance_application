version: "3.9"

services:
  backend:
    build: ./backend
    env_file: .env
    environment:
      # Ensure DATABASE path defaults inside container
      - DATABASE=/data/employee.db
      - SECRET_KEY=your-production-secret-change-this
      - ALLOWED_ORIGINS=http://localhost:80,https://yourdomain.com
    ports:
      - "5000:5000"
    volumes:
      - backend-data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request,sys; urllib.request.urlopen('http://localhost:5000/healthz', timeout=5).read(); print('OK')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s
    networks:
      - app-network

  frontend:
    build: ./frontend
    env_file: .env
    ports:
      - "80:80"
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost/ >/dev/null 2>&1 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - app-network

  ddns:
    image: curlimages/curl:8.8.0
    env_file: .env
    command: ["sh", "-c", ": ${FREEDNS_UPDATE_INTERVAL:=300}; while true; do if [ -n \"$FREEDNS_UPDATE_URL\" ]; then echo \"[DDNS] Updating at $(date -u)\"; curl -fsS --max-time 20 \"$FREEDNS_UPDATE_URL\" || echo \"[DDNS] update failed\"; else echo '[DDNS] FREEDNS_UPDATE_URL not set'; fi; sleep $FREEDNS_UPDATE_INTERVAL; done"]
    restart: unless-stopped
    networks:
      - app-network

volumes:
  backend-data:

networks:
  app-network:
    driver: bridge