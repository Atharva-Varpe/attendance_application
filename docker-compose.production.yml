version: "3.9"

services:
  # Nginx reverse proxy (main entry point)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl:/etc/nginx/ssl  # For SSL certificates
      - frontend-static:/usr/share/nginx/html
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - app-network

  backend:
    build: ./backend
    env_file: .env
    environment:
      - DATABASE=/data/employee.db
      - FLASK_ENV=production
    volumes:
      - backend-data:/data
    restart: unless-stopped
    networks:
      - app-network
    # No external ports - only accessible via nginx

  frontend:
    build: ./frontend
    volumes:
      - frontend-static:/usr/share/nginx/html
    restart: unless-stopped
    depends_on:
      - backend
    networks:
      - app-network
    # No external ports - static files served by nginx

  ddns:
    image: curlimages/curl:8.8.0
    env_file: .env
    command: ["sh", "-c", ": $${FREEDNS_UPDATE_INTERVAL:=300}; while true; do if [ -n \"$$FREEDNS_UPDATE_URL\" ]; then echo \"[DDNS] Updating at $$(date -u)\"; curl -fsS --max-time 20 \"$$FREEDNS_UPDATE_URL\" || echo \"[DDNS] update failed\"; else echo '[DDNS] FREEDNS_UPDATE_URL not set'; fi; sleep $$FREEDNS_UPDATE_INTERVAL; done"]
    restart: unless-stopped
    networks:
      - app-network

  # Optional: Database backup service
  backup:
    image: alpine:latest
    volumes:
      - backend-data:/data
      - ./backups:/backups
    command: ["sh", "-c", "while true; do cp /data/employee.db /backups/employee_$(date +%Y%m%d_%H%M%S).db; find /backups -name '*.db' -mtime +7 -delete; sleep 86400; done"]
    restart: unless-stopped

volumes:
  backend-data:
  frontend-static:

networks:
  app-network:
    driver: bridge
